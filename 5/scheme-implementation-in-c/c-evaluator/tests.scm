(begin
   (define passed-tests 0)
   (define failed-tests 0)
   (define (test actual expected)
     (if (equal? actual expected)
         (set! passed-tests (+ 1 passed-tests))
         (set! failed-tests (+ 1 failed-tests))))

   (test 1 1)
   (test "something" "something")
   (test (quote foo) 'foo)
   (test (begin 1 2) 2)
   (test (define x1 1) 'ok)
   (test (begin (define x2 1)
                        x2)
         1)
   (test (define (x3) 1)
         'ok)
   (test (begin (define (x3) 1)
                (x3))
         1)
   (test (begin (define x4 1)
                (set! x4 2))
         'ok)
   (test (begin (define x5 1)
                (set! x5 2)
                x5)
         2)

   (test (if true 1 2) 1)
   (test (if false 1 2) 2)

   (test ((lambda () 1)) 1)
   (test ((lambda (x) x) 1) 1)
   (test ((lambda (a b) (cons a b)) 1 2) '(1 . 2))
   (test (begin (define a 1)
                (define b 2)
                ((lambda (a) (cons a b)) 3))
         '(3 . 2))

   (test (begin (define (a) 1)
                (a))
         1)
   (test (begin (define (pair1 a b) (cons a b))
                (pair1 1 2))
         '(1 . 2))
   (test (begin (define a 1)
                (define (pair2 b) (cons a b))
                (pair2 2))
         '(1 . 2))

   (test (begin (define (append1 x y)
                  (if (null? x)
                      y
                      (cons (car x)
                            (append1 (cdr x) y))))
                (append1 '(a b c) '(d e f)))
         '(a b c d e f))

   (test (begin (define (factorial1 n)
                  (if (= n 1)
                      1
                      (* n (factorial1 (- n 1)))))
                (factorial1 5))
         120)
   (test (begin (define (factorial2 n)
                  (define (iter n result)
                    (if (= n 0)
                        result
                        (iter (- n 1) (* result n))))
                  (iter n 1))
                (factorial2 5))
         120)

   (test (< 1 (gc-runs)) true)

   (test (begin (define (countdown n)
                  (if (= n 0)
                      'done
                      (countdown (- n 1))))
                (countdown (+ 1 (stack-max-depth))))
         'done)

   (display (list 'passed '= passed-tests 'failed '= failed-tests)))
