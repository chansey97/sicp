#lang racket
(provide (all-defined-out))
(require "simulator.rkt")

(define (add-pointers p1 p2)
  (let ((type1 (car p1)) (type2 (car p2))
        (value1 (cadr p1)) (value2 (cadr p2)))
    (if (eq? type1 type2)
        (list type1 (+ value1 value2))
        (error "Attempting to add incompatible pointers" p1 p2))))

(define (vector-ref-pointer vector pointer)
  (if (eq? (car pointer) 'p)
      (vector-ref vector (cadr pointer))
      (error "Cannot index vector with this pointer" pointer)))

(define (vector-set!-pointer vector pointer value)
  (if (eq? (car pointer) 'p)
      (vector-set! vector (cadr pointer) value)
      (error "Cannot modify vector with this pointer" pointer)))

(define (null?-pointers pointer)
  (equal? pointer '(e 0)))

(define (pair?-pointers pointer)
  (eq? (car pointer) 'p))

;; scheme's lst to machine's pointer 
(define (allocate-list machine lst)
  (define the-cars (get-register-contents machine 'the-cars))
  (define the-cdrs (get-register-contents machine 'the-cdrs))
  (define saved-pairs '())
  (define (save-pair pair offset)
    (set! saved-pairs (cons (cons pair (list 'p offset)) saved-pairs)))
  (define (saved-pair-offset pair)
    (define (lookup pairs)
      (cond ((null? pairs) #f)
            ((eq? pair (caar pairs)) (cdar pairs))
            (else (lookup (cdr pairs)))))
    (lookup saved-pairs))
  (define (saved? pair)
    (not (eq? (saved-pair-offset pair) #f)))
  (define (allocate item)
    (cond ((number? item) (list 'n item))
          ((null? item) (list 'e 0))
          ((saved? item) (saved-pair-offset item)) ; lst has back reference
          ((pair? item)
           (let ((offset (cadr (get-register-contents machine 'free))))
             (set-register-contents! machine 'free (list 'p (+ offset 1)))
             (save-pair item offset)
             (vector-set! the-cars offset (allocate (car item)))
             (vector-set! the-cdrs offset (allocate (cdr item)))
             (list 'p offset)))
          (else (error "Don't know how to allocate this -- ALLOCATE-LIST" item))))
  (allocate lst))

;; machine's pointer to scheme lst
(define (list-in-memory machine pointer)
  (define the-cars (get-register-contents machine 'the-cars))
  (define the-cdrs (get-register-contents machine 'the-cdrs))
  (define (build pointer)
    (cond ((eq? (car pointer) 'n) (cadr pointer))
          ((equal? pointer '(e 0)) '())
          ((eq? (car pointer) 'p)
           (cons (build (vector-ref the-cars (cadr pointer)))
                 (build (vector-ref the-cdrs (cadr pointer)))))
          (else (error "Don't know how to build -- LIST-IN-MEMORY" pointer))))
  (build pointer))

(define (memory-dump machine)
  (define (shorten pointer)
    (if (pair? pointer)
        (string->symbol (string-append (symbol->string (car pointer))
                                       (number->string (cadr pointer))))
        '__))
  (list (map shorten (vector->list (get-register-contents machine 'the-cars)))
        (map shorten (vector->list (get-register-contents machine 'the-cdrs)))))

(define (make-machine-with-memory registers controller-text)
  (let ((machine (make-machine (append registers '(free the-cars the-cdrs))
                               (list (list 'vector-ref vector-ref-pointer)
                                     (list 'vector-set! vector-set!-pointer)
                                     (list '+ add-pointers)
                                     (list 'null? null?-pointers)
                                     (list 'pair? pair?-pointers))
                               controller-text)))
    (set-register-contents! machine 'the-cars (make-vector 20))
    (set-register-contents! machine 'the-cdrs (make-vector 20))
    (set-register-contents! machine 'free '(p 0))
    machine))
