#lang racket
(require rackunit rackunit/text-ui)
(require "./generic-operations.rkt")

(define sicp-2.86-tests
  (test-suite
    "Tests for SICP exercise 2.86"

    (test-suite "type tower"
      (check-true (supertype? 'integer 'rational))
      (check-true (supertype? 'integer 'real))
      (check-true (supertype? 'integer 'complex))
      (check-true (supertype? 'rational 'real))
      (check-true (supertype? 'rational 'complex))
      (check-true (supertype? 'real 'complex))
    )

    (test-suite "integers"
      (check-exn exn? (lambda () (make-integer 1.5)))
      (check-equal? (add (make-integer 1) (make-integer 2)) (make-integer 3))
      (check-equal? (sub (make-integer 3) (make-integer 2)) (make-integer 1))
      (check-equal? (mul (make-integer 2) (make-integer 4)) (make-integer 8))
      (check-true (equ? (make-integer 1) (make-integer 1)))
      (check-false (equ? (make-integer 1) (make-integer 2)))
      (check-equal? (raise (make-integer 2)) (make-rational 2 1))
    )

    (test-suite "rationals"
      (check-exn exn? (lambda () (make-rational 1.5 1)))
      (check-exn exn? (lambda () (make-rational 1 1.5)))
      (check-equal? (add (make-rational 1 2) (make-rational 3 4)) (make-rational 5 4))
      (check-equal? (sub (make-rational 3 4) (make-rational 1 2)) (make-rational 1 4))
      (check-equal? (mul (make-rational 2 3) (make-rational 3 6)) (make-rational 1 3))
      (check-equal? (div (make-rational 5 4) (make-rational 1 2)) (make-rational 5 2))
      (check-equal? (raise (make-rational 5 2)) (/ 5 2))
      (check-true (equ? (make-rational 1 2) (make-rational 2 4)))
      (check-false (equ? (make-rational 1 2) (make-rational 1 3)))
      (check-equal? (project (make-rational 5 2)) (make-integer 2))
    )

    (test-suite "scheme numbers"
      (check-equal? (type-tag 1) 'scheme-number)
      (check-equal? (contents 1) 1)
      (check-equal? (attach-tag 'scheme-number 1) 1)
      (check-equal? (add 1 2) (make-integer 3))
      (check-equal? (sub 3 2) (make-integer 1))
      (check-equal? (mul 2 4) (make-integer 8))
      (check-equal? (div 8 4) (make-integer 2))
      (check-equal? (sine 1) (sin 1))
      (check-equal? (cosine 1) (cos 1))
      (check-equal? (arctangent 3 4) (atan 3 4))
      (check-equal? (project 4.5) (make-rational 4 1))
      (check-equal? (raise 4.5) (make-real 4.5))
      (check-true (equ? 1 1))
      (check-false (equ? 2 3))
    )

    (test-suite "reals"
      (check-equal? (add (make-real 1.5) (make-real 2.0)) 3.5)
      (check-equal? (sub (make-real 3.5) (make-real 2.0)) 1.5)
      (check-equal? (mul (make-real 1.25) (make-real 2.0)) 2.5)
      (check-equal? (div (make-real 5.0) (make-real 2.0)) 2.5)
      (check-equal? (sine (make-real 1.0)) (sin 1.0))
      (check-equal? (cosine (make-real 1.0)) (cos 1.0))
      (check-equal? (square-root (make-real 2.0)) (sqrt 2.0))
      (check-equal? (arctangent (make-real 3.0) (make-real 4.0)) (atan 3.0 4.0))
      (check-true (equ? (make-real 2.5) (make-real 2.5)))
      (check-false (equ? (make-real 2.0) (make-real 2.5)))
      (check-equal? (project (make-real 2.5)) 2.5)
    )

    (test-suite "coercions among numbers"
      (check-equal? (div (make-integer 1) (make-integer 2)) (make-rational 1 2))
      (check-equal? (add (make-integer 1) (make-rational 1 2)) (make-rational 3 2))
      (check-equal? (add (make-integer 1) (make-real 2.5)) 3.5)
      (check-equal? (sine (make-integer 1)) (sin 1.0))
      (check-equal? (sine (make-rational 2 2)) (sin 1.0))
      (check-equal? (arctangent (make-integer 3) (make-integer 4)) (atan 3.0 4.0))
    )

    (test-suite "simplification"
      (check-equal? (simplify (make-rational 2 1)) (make-integer 2))
      (check-equal? (simplify (/ 2 1)) (make-integer 2))
      (check-equal? (simplify (make-real 4.0)) (make-integer 4))
      (check-equal? (simplify 2.5) 2.5)
      (check-equal? (simplify (make-real 2.5)) 2.5)
    )

    (test-suite "complex numbers with various coercions and simplifications"
      (check-equal? (add (make-complex (make-real 1.0) (make-real 2.0))
                         (make-complex (make-real 3.0) (make-real 4.0)))
                    (make-complex (make-integer 4) (make-integer 6)))
      (check-equal? (sub (make-complex (make-real 3.0) (make-real 5.0))
                         (make-complex (make-real 1.0) (make-real 2.0)))
                    (make-complex (make-integer 2) (make-integer 3)))
      (check-equal? (mul (make-complex (make-real 3.0) (make-real 4.0))
                         (make-complex (make-real 6.0) (make-real 8.0)))
                    (make-complex-from-mag-ang (make-integer 50)
                                               (+ (atan 4.0 3.0)
                                                  (atan 8.0 6.0))))
      (check-equal? (div (make-complex (make-real 6.0) (make-real 8.0))
                         (make-complex (make-real 3.0) (make-real 4.0)))
                    (make-integer 2))
      (check-true (equ? (make-complex (make-real 1.0) (make-real 2.0))
                        (make-complex (make-real 1.0) (make-real 2.0))))
      (check-true (equ? (make-complex (make-real 1.0) (make-real 2.0))
                        (make-complex (make-integer 1) (make-integer 2))))
      (check-equal? (mul (make-complex-from-mag-ang (make-integer 2) (make-rational 2 1))
                         (make-complex-from-mag-ang (make-real 3) (make-real 4)))
                    (make-complex-from-mag-ang (make-integer 6) (make-integer 6)))

      (check-equal? (real-part (make-complex-from-mag-ang (make-real 5)
                                                          (make-real (atan 4 3))))
                    (* 5 (cos (atan 4 3))))
      (check-equal? (imag-part (make-complex-from-mag-ang (make-real 5)
                                                          (make-real (atan 4 3))))
                    (* 5 (sin (atan 4 3))))
      (check-equal? (mul (make-complex-from-mag-ang (make-integer 2) (make-rational 2 1))
                         (make-complex-from-mag-ang 3 (make-real 4)))
                    (make-complex-from-mag-ang (make-integer 6) (make-integer 6)))
    )
))

(run-tests sicp-2.86-tests)

