; SICP exercise 3.78
;
; Consider the problem of designing a signal-processing system to study the
; homogeneous second-order linear differential equation
;
;   d²y    dy
;   ─── - a── - by = 0
;   dt²    dt
;
; The output stream, modeling y, is generated by a network that contains a
; loop. This is because the value of d²y/dt² depends upon the values of y and
; dy/dt and both of these are determined by integrating d²y/dt². The diagram
; we would like to encode is shown in figure 3.35. Write a procedure solve-2nd
; that takes as arguments the constants a, b and dt and the initial values y₀
; and dy₀ for y and dy/dt and generates the stream of successive values of y.

; SICP exercise 3.79
;
; Generlize the solve-2nd procedure of exercise 3.78 so that it can be used to
; solve general second-order differential equations d²y/dt² = f(dy/dt, y).

#lang racket
(require "../../stream/stream.rkt"
         "../../stream/op-streams.rkt"
         "../signal-processing.rkt")

;; Note:
;; Recommand see my Haskell code (a lot of examples)
;; https://github.com/chansey97/experiments/blob/main/haskell/stream/SICP/DifferentialEquation.hs

;; Exercise 3.78
(define (solve-2nd a b dt y0 dy0)
  (define y (integral-delayed (delay dy) y0 dt))
  (define dy (integral-delayed (delay ddy) dy0 dt))
  (define ddy (add-streams (scale-stream dy a)
                           (scale-stream y b)))
  y)

;; Exercise 3.79
(define (solve-2nd-generic f y0 dy0 dt)
  (define y (integral-delayed (delay dy) y0 dt))
  (define dy (integral-delayed (delay ddy) dy0 dt))
  (define ddy (stream-map f dy y)) ; TODO: 推广的 stream-map or zipWith Ex. Exercise 3.50
  y)
